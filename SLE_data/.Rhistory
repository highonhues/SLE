library(readxl)
excel = read_excel("C:\Users\Ananya\Desktop\NMC\manhattan plot\Additive association.xlsx")
excel = read_excel("C:/Users/Ananya/Desktop/NMC/manhattan plot/Additive association.xlsx")
install.packages("qqman")
library(qqman)
dfgwas = data.frame(excel)
View(dfgwas)
rm(list =ls())
library(readxl)
excel = read_excel("C:/Users/Ananya/Desktop/NMC/manhattan plot/Additive association.xlsx")
install.packages("qqman")
library(qqman)
dfgwas = data.frame(excel)
View(dfgwas)
dfgwas
\manhattan(dfgwas, chr="CHROM", bp="POS", snp="ID", p="P" )
manhattan(dfgwas, chr="CHROM", bp="POS", snp="ID", p="P" )
manhattan (dfgwas, chr="CHROM", bp="POS", snp="ID", p="P" )
manhattan (dfgwas, main= "manhattanplot" chr="CHROM", bp="POS", snp="ID", p="P" )
manhattan (dfgwas, main= "manhattanplot" , chr="CHROM", bp="POS", snp="ID", p="P" )
manhattan (excel, main= "manhattanplot" , chr="CHROM", bp="POS", snp="ID", p="P" )
manhattan (excel, main= "manhattanplot" , chr="CHROM", bp="POS", snp="ID", p="P" )
assoc= read.table("C:/Users/Ananya/Desktop/NMC/manhattan plot/hvoto_final.assoc")
View(assoc)
manhattan (assoc, main= "manhattanplot" , chr="CHROM", bp="BP", snp="SNP", p="P" )
manhattan (assoc, main= "manhattanplot" , chr="V1", bp="BP", snp="SNP", p="P" )
manhattan (assoc, main= "manhattanplot" , chr="V1", bp="V3", snp="V2", p="V9" , header= FALSE)
manhattan (assoc, main= "manhattanplot" , chr="V1", bp="V3", snp="V2", p="V9" , header= TRUE)
df=data.frame(assoc)
View(assoc)
manhattan (excel, main= "manhattanplot" , chr="CHROM", bp="POS", snp="ID", p="P")
library(readxl)
excel = read_excel("C:/Users/Ananya/Desktop/NMC/manhattan plot/Additive association.xlsx")
install.packages("qqman")
View(excel)
manhattan(
excel,
chr = "CHROM",
bp = "POS",
p = "P",
snp = "ID",
col = c("gray10", "gray60"),
chrlabs = NULL,
suggestiveline = -log10(1e-05),
genomewideline = -log10(5e-08),
highlight = NULL,
logp = TRUE,
annotatePval = NULL,
annotateTop = TRUE
)
library(qqman)
manhattan(
excel,
chr = "CHROM",
bp = "POS",
p = "P",
snp = "ID",
col = c("gray10", "gray60"),
chrlabs = NULL,
suggestiveline = -log10(1e-05),
genomewideline = -log10(5e-08),
highlight = NULL,
logp = TRUE,
annotatePval = NULL,
annotateTop = TRUE
)
manhattan(
excel,
chr = ~CHROM,
bp = "POS",
p = "P",
snp = "ID",
col = c("gray10", "gray60"),
chrlabs = NULL,
suggestiveline = -log10(1e-05),
genomewideline = -log10(5e-08),
highlight = NULL,
logp = TRUE,
annotatePval = NULL,
annotateTop = TRUE
)
manhattan(
excel,
chr = "CHROM",
bp = "POS",
p = "P",
snp = "ID",
col = c("gray10", "gray60"),
chrlabs = NULL,
suggestiveline = -log10(1e-05),
genomewideline = -log10(5e-08),
highlight = NULL,
logp = TRUE,
annotatePval = NULL,
annotateTop = TRUE
)
excel = read_excel("C:\Users\Ananya\Desktop\NMC\manhattan plot\hvoto_allelic association.xlsx)
excel = read_excel("C:\Users\Ananya\Desktop\NMC\manhattan plot\hvoto_allelic association.xlsx)
excel = read_excel("C:\Users\Ananya\Desktop\NMC\manhattan plot\hvoto_allelic association.xlsx)
rm(list =ls())
library(readxl)
excel = read_excel("C:/Users/Ananya/Desktop/NMC/manhattan plot/hvoto_allelic association.xlsx)
install.packages("qqman")
excel = read_excel("C:/Users/Ananya/Desktop/NMC/manhattan plot/hvoto_allelic association.xlsx)
install.packages("qqman")
203+7
source("http://www.bioconductor.org/biocLite.R")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.19")
version
gene1 <- c(-0.45,1.45,1.10)
gene2 <- c(-0.85,1.80,-2.35)
gene3 <- c(1.85,-1.55,-2.65)
gene4 <- c(2.05,1.25,3.25)
rowcolnames <- list(c("gene1"."gene2","gene3","gene4"),c("Eric","Peter","Ana"))
rowcolnames <- list(c("gene1","gene2","gene3","gene4"),c("Eric","Peter","Ana"))
genedata <- matrix(c(gene1,gene2,gene3,gene4), nrows=4, ncol=3, byrow=TRUE, dimnames=rowcolnames)
genedata <- matrix(c(gene1,gene2,gene3,gene4), nrow=4, ncol=3, byrow=TRUE, dimnames=rowcolnames)
genedata
gene1 <- c(-0.45,1.45,1.10)
gene2 <- c(-0.85,1.80,-2.35)
gene3 <- c(1.85,-1.55,-2.65)
gene4 <- c(2.05,1.25,3.25)
rowcolnames <- list(c("gene1","gene2","gene3","gene4"),c("Eric","Peter","Ana"))
genedata
genedata <- matrix(c(gene1,gene2,gene3,gene4), nrow=4, ncol=3, byrow=TRUE, dimnames=rowcolnames)
genedata
apply(genedata,2,mean)
apply(genedata,1,mean)
meanexprsval <- apply(genedata,1,mean)
o <- order(meanexprsval,decreasing=TRUE)
o
genedata[o,]
genedata[c(1,2),]
genedata[c("gene1","gene2"),]
meanexprsval > 0
genedata[meanexprsval > 0,]
q()
q()
t.test()?
q()
q()
BiocManager::install("recount")
install.packages("BiocManager")
load(file.path(’SRP026387’, ’rse gene.Rdata’))
# loading dataset
url <- download_study(’SRP026387’)
# loading dataset
url <- download_study('SRP026387’)
load(file.path('SRP026387', ’rse gene.Rdata’))
load(file.path('SRP026387', ’rse_gene.Rdata’))
# loading dataset
url <- download_study('SRP026387’)
load(file.path('SRP026387', 'rse_gene.Rdata’))
rse -> SE2DGEList(res_gene)
rse -> SE2DGEList(rse_gene)
load(file.path('SRP026387’, 'rse_gene.Rdata’))
# loading dataset
url <- download_study('SRP026387’)
load(file.path('SRP026387’,'rse_gene.Rdata'))
load(file.path('SRP026387','rse_gene.Rdata'))
library(SummarizedExperiment)
# loading dataset
url <- download_study('SRP026387’)
rse -> SE2DGEList(rse_gene)
rse
rse
print(rse)
rse
rse -> SE2DGEList(rse_gene)
rse <- SE2DGEList(rse_gene)
rse
print(rse_gene)
# loading dataset
url <- download_study('SRP026387')
# loading dataset
url <- download_study('SRP026387')
# loading dataset
url <- download_study(’SRP026387’)
# loading dataset
url <- download_study("SRP026387")
# loading dataset
url <- download_study("SRP026387")
getwd()
cd /c/Users/Ananya/Desktop/SJSU/CS 297/coupoe/GSE217886
pwd
getwd()
setwd("C:/Users/Ananya/Desktop/SJSU/Stanford/SLE_data)
setwd("C:/Users/Ananya/Desktop/SJSU/Stanford/SLE_data")
getwd()
rclone authorize "googledrive"
rclone authorize "onedrive"
rclone
getwd()
library(GEOquery)
install.packages('devtools') #try this after installing rtools
devtools::install_github('immunogenomics/presto')
getwd()
devtools::install_github('immunogenomics/presto')
bcells <- readRDS("C:/Users/Ananya/Desktop/SJSU/Stanford/SLE_data/seurat_B_PB_scRNA_SLE_HC_GSE174188.rds")
ste(bcells)
str(bcells)
levels(bcells)
slotNames(bcells)
print(bcells.data)
print(bcells$RNS)
print(bcells$RNA)
dim(seurat_object)
dim(bcells)
print(bcells@meta.data)
head(bcells@meta.data, n=5)
head(bcells@meta.data, n=1)
print(head(bcells@meta.data, n=1))
library(tibble)
head(as.data.frame(bcells@meta.data), n=1)
as_tibble(bcells@meta.data)
head(bcells[["RNA"]]$counts, n=3)
as_tibble(head(bcells[["RNA"]]$counts, n=3))
##hpc
options(repos = c(CRAN = "https://cloud.r-project.org"))
library(tidyverse)
library(dplyr) #DATA wrangling filtering, selecting and summarising
library(Seurat)
library(patchwork)#combines multiple ggplot2 plots into a single plot
library(GEOquery)
library(ggplot2)
library(tibble)
bcells <- readRDS("C:/Users/Ananya/Desktop/SJSU/Stanford/SLE_data/seurat_B_PB_scRNA_SLE_HC_GSE174188.rds")
levels(bcells) # just 9 clusters
gc()
library(tidyverse)
library(dplyr) #DATA wrangling filtering, selecting and summarising
library(Seurat)
library(patchwork)#combines multiple ggplot2 plots into a single plot
library(GEOquery)
library(ggplot2)
library(tibble)
library(tidyverse)
library(dplyr) #DATA wrangling filtering, selecting and summarising
library(Seurat)
library(patchwork)#combines multiple ggplot2 plots into a single plot
library(GEOquery)
library(ggplot2)
library(tibble)
bcells <- readRDS("C:/Users/Ananya/Desktop/SJSU/Stanford/SLE_data/seurat_B_PB_scRNA_SLE_HC_GSE174188.rds")
set.seed(42)
tot_cells <- ncol(bcells)
sample_b <- sample(colnames(bcells), size=20000, replace=FALSE)
bcells <- subset(bcells,cells=sample_b)
levels(bcells) # just 9 clusters
slotNames(bcells)
print(bcells$RNA)# 21429 features for 152962 cells
install.packages("AnnotationDbi")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
BiocManager::install("AnnotationDbi")
library(org.Hs.eg.db)
print(head(bcells@meta.data, n=1))
as_tibble(bcells@meta.data)
print(bcells$RNA)# 21429 features for 152962 (now 20k) cells
rownames(bcells@assays$RNA)
# Get the current feature names (ENSEMBL IDs and gene symbols)
features <- rownames(bcells@assays$RNA)
# Extract ENSEMBL IDs (those starting with "ENSG")
ensembl_ids <- features[grep("^ENSG", features)]
# Map ENSEMBL IDs to gene symbols
gene_symbols <- mapIds(
org.Hs.eg.db,
keys = ensembl_ids,
keytype = "ENSEMBL",
column = "SYMBOL"
)
# View the mapping
head(gene_symbols)
library(AnnotationDbi)
# Get the current feature names (ENSEMBL IDs and gene symbols)
features <- rownames(bcells@assays$RNA)
# Extract ENSEMBL IDs (those starting with "ENSG")
ensembl_ids <- features[grep("^ENSG", features)]
ensembl_ids
# Map ENSEMBL IDs to gene symbols
gene_symbols <- mapIds(
org.Hs.eg.db,
keys = ensembl_ids,
keytype = "ENSEMBL",
column = "SYMBOL"
)
# View the mapping
head(gene_symbols)
sum(is.na(gene_symbols))
dim(gene_symbols)
# Map ENSEMBL IDs to gene symbols
gene_symbols <- mapIds(
org.Hs.eg.db,
keys = ensembl_ids,
keytype = "ENSEMBL",
column = "SYMBOL"
)
str(gene_symbols)
BiocManager::install("EnsDb.Hsapiens.v79")
library(ensembldb)
library(EnsDb.Hsapiens.v79)
BiocManager::install("EnsDb.Hsapiens.v79")
# Load the EnsDb object
edb <- EnsDb.Hsapiens.v79
# Extract gene annotations
gene_annotations <- genes(edb, return.type = "data.frame")
# Select relevant columns (ENSEMBL ID and gene symbol)
gene_mapping <- gene_annotations %>%
dplyr::select(gene_id, gene_name)
# View the mapping
head(gene_mapping)
#getting current genes
features <- rownames(bcells@assays$RNA)
#getting genes with ensg
ensembl_ids <- features[grep("^ENSG", features)]
# Map ENSEMBL IDs to gene symbols using the EnsDb mapping
gene_symbols <- gene_mapping$gene_name[match(ensembl_ids, gene_mapping$gene_id)]
# Create a named vector for mapping
feature_mapping <- features
names(feature_mapping) <- features
feature_mapping[ensembl_ids] <- gene_symbols
# Update the feature names in the Seurat object
rownames(bcells@assays$RNA@counts) <- feature_mapping[rownames(bcells@assays$RNA@counts)]
# Update the feature names in the Seurat object
rownames(bcells@assays$RNA@counts) <- feature_mapping[rownames(bcells@assays$RNA$counts)]
# Inspect the structure of the Seurat object
str(bcells, max.level = 2)
# Inspect the structure of the RNA assay
str(bcells@assays$RNA, max.level = 2)
# Check the available layers in the RNA assay
names(bcells@assays$RNA$layers)
# Check the class of the RNA assay
class(bcells@assays$RNA)
head(bcells@assays$RNA@meta.data)
slotNames(bcells@assays$RNA)
methods(class = "Assay5")
# Inspect the features slot
head(bcells@assays$RNA@features)
# Inspect the rownames of the RNA assay
head(rownames(bcells@assays$RNA))
# Update the feature names in the Seurat object
rownames(bcells@assays$RNA) <- feature_mapping[rownames(bcells@assays$RNA)]
# Step 5: Verify the update
head(rownames(bcells@assays$RNA))
bcells@assays$RNA$layers$counts
bcells@assays$RNA$Layers$counts
#checking it and it worked
head(rownames(bcells@assays$RNA))
feature_name
feature_mapping
str(feature_mapping)
feature_name
str(edb, max.level = 2)
str(edb, max.level = 3)
head(edb)
View(edb)
head(edb[entrezgene])
str(features)
head(edb[[entrezgene])
head(edb[[entrezgene]])
str(gene_symbols)
head(gene_mapping)
#getting current genes
features <- rownames(bcells@assays$RNA)
#getting genes with ensg
ensembl_ids <- features[grep("^ENSG", features)]
bcells <- readRDS("C:/Users/Ananya/Desktop/SJSU/Stanford/SLE_data/seurat_B_PB_scRNA_SLE_HC_GSE174188.rds")
set.seed(42)
tot_cells <- ncol(bcells)
sample_b <- sample(colnames(bcells), size=20000, replace=FALSE)
bcells <- subset(bcells,cells=sample_b)
levels(bcells) # just 9 clusters
slotNames(bcells)
print(bcells$RNA)# 21429 features for 152962 (now 20k) cells
#just exploring it
as_tibble(bcells@meta.data)
# Load the EnsDb object
edb <- EnsDb.Hsapiens.v79
str(edb, max.level = 3)
# Extract gene annotations
gene_annotations <- genes(edb, return.type = "data.frame")
#ENSEMBL ID and gene symbol
gene_mapping <- gene_annotations %>%
dplyr::select(gene_id, gene_name)
head(gene_mapping)
#getting current genes
features <- rownames(bcells@assays$RNA)
#getting genes with ensg
ensembl_ids <- features[grep("^ENSG", features)]
# Map ENSEMBL IDs to gene symbols using the EnsDb mapping
#find index of ensembl_id in the gene_id(ensembl) col of gene_mapping
# extract the gene_name at that index and assign to gene_symbol
gene_symbols <- gene_mapping$gene_name[match(ensembl_ids, gene_mapping$gene_id)]
# Create a named vector for mapping
feature_mapping <- features #keys and values both are original feature names
names(feature_mapping) <- features #name is key and val
#i want to update only the mapped Ensmbl ids
for (x in seq_along(ensembl_ids)) {#iterate along its length
if (!is.na(gene_symbols[x])) { #at the index if the symbol is not na
feature_mapping[ensembl_ids[x]] <- gene_symbols[x]
}
}
head(feature_mapping)
# Update the feature names in the Seurat object
rownames(bcells@assays$RNA) <- feature_mapping[rownames(bcells@assays$RNA)]
#checking it and it worked
head(rownames(bcells@assays$RNA))
VariableFeatures(bcells
VariableFeatures(bcells)
VariableFeatures(bcells)
